{"version":3,"sources":["jqBootstrapValidation.js"],"names":["$","createdElements","defaults","options","prependExistingHelpBlock","sniffHtml","preventSubmit","submitError","submitSuccess","semanticallyStrict","autoAdd","helpBlocks","filter","methods","init","settings","extend","uniqueForms","unique","this","map","parents","toArray","bind","e","$form","warningsFound","$inputs","find","not","trigger","each","i","el","$controlGroup","first","hasClass","removeClass","addClass","preventDefault","isFunction","jqBootstrapValidation","$this","$helpBlock","validatorNames","length","append","push","message","undefined","attr","data","max","min","builtInValidators","required","toLowerCase","number","split","parts","replace","validatorNamesToInspect","newValidatorNamesToInspect","formatValidatorName","i2","el2","validator","type","shortcut","validators","hasOverrideMessage","foundValidator","validatorTypes","validatorType","validatorTemplate","name","validatorTemplateType","error","html","event","params","value","getValue","errorsFound","validatorTypeArray","includeEmpty","blockSubmit","submitting","validate","triggerHandler","join","oldCount","j","original","sort","destroy","unbind","indexOf","remove","collectErrors","errorMessages","$el","errors","hasErrors","concat","override","newDefaults","callback","validatorName","lastValue","val","lastValid","lastFinished","rrjqbvValidator","rrjqbvThis","functionName","context","args","Array","prototype","slice","call","arguments","splice","namespaces","func","pop","apply","executeFunctionByName","window","valid","setTimeout","ajax","url","dataType","success","failure","regex","inputstring","RegExp","regexFromString","test","negative","match","element","parseFloat","maxlength","minlength","maxchecked","elements","minchecked","email","validemail","passwordagain","positive","integer","positivenumber","negativenumber","checkone","m","p1","p2","toUpperCase","is","fn","method","jQuery"],"mappings":"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","file":"jqBootstrapValidation.min.js","sourcesContent":["/* jqBootstrapValidation\r\n * A plugin for automating validation on Twitter Bootstrap formatted forms.\r\n *\r\n * v1.3.6\r\n *\r\n * License: MIT <http://opensource.org/licenses/mit-license.php> - see LICENSE file\r\n *\r\n * http://ReactiveRaven.github.com/jqBootstrapValidation/\r\n */\r\n\r\n(function ($) {\r\n\r\n    var createdElements = [];\r\n\r\n    var defaults = {\r\n        options: {\r\n            prependExistingHelpBlock: false,\r\n            sniffHtml: true, // sniff for 'required', 'maxlength', etc\r\n            preventSubmit: true, // stop the form submit event from firing if validation fails\r\n            submitError: false, // function called if there is an error when trying to submit\r\n            submitSuccess: false, // function called just before a successful submit event is sent to the server\r\n            semanticallyStrict: false, // set to true to tidy up generated HTML output\r\n            autoAdd: {\r\n                helpBlocks: true\r\n            },\r\n            filter: function () {\r\n                // return $(this).is(\":visible\"); // only validate elements you can see\r\n                return true; // validate everything\r\n            }\r\n        },\r\n        methods: {\r\n            init: function (options) {\r\n\r\n                var settings = $.extend(true, {}, defaults);\r\n\r\n                settings.options = $.extend(true, settings.options, options);\r\n\r\n                var $siblingElements = this;\r\n\r\n                var uniqueForms = $.unique(\r\n                    $siblingElements.map(function () {\r\n                        return $(this).parents(\"form\")[0];\r\n                    }).toArray()\r\n                );\r\n\r\n                $(uniqueForms).bind(\"submit\", function (e) {\r\n                    var $form = $(this);\r\n                    var warningsFound = 0;\r\n                    var $inputs = $form.find(\"input,textarea,select\").not(\"[type=submit],[type=image]\").filter(settings.options.filter);\r\n                    $inputs.trigger(\"submit.validation\").trigger(\"validationLostFocus.validation\");\r\n\r\n                    $inputs.each(function (i, el) {\r\n                        var $this = $(el),\r\n                            $controlGroup = $this.parents(\".form-group\").first();\r\n                        if (\r\n                            $controlGroup.hasClass(\"warning\")\r\n                        ) {\r\n                            $controlGroup.removeClass(\"warning\").addClass(\"error\");\r\n                            warningsFound++;\r\n                        }\r\n                    });\r\n\r\n                    $inputs.trigger(\"validationLostFocus.validation\");\r\n\r\n                    if (warningsFound) {\r\n                        if (settings.options.preventSubmit) {\r\n                            e.preventDefault();\r\n                        }\r\n                        $form.addClass(\"error\");\r\n                        if ($.isFunction(settings.options.submitError)) {\r\n                            settings.options.submitError($form, e, $inputs.jqBootstrapValidation(\"collectErrors\", true));\r\n                        }\r\n                    } else {\r\n                        $form.removeClass(\"error\");\r\n                        if ($.isFunction(settings.options.submitSuccess)) {\r\n                            settings.options.submitSuccess($form, e);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                return this.each(function () {\r\n\r\n                    // Get references to everything we're interested in\r\n                    var $this = $(this),\r\n                        $controlGroup = $this.parents(\".form-group\").first(),\r\n                        $helpBlock = $controlGroup.find(\".help-block\").first(),\r\n                        $form = $this.parents(\"form\").first(),\r\n                        validatorNames = [];\r\n\r\n                    // create message container if not exists\r\n                    if (!$helpBlock.length && settings.options.autoAdd && settings.options.autoAdd.helpBlocks) {\r\n                        $helpBlock = $('<div class=\"help-block\" />');\r\n                        $controlGroup.find('.controls').append($helpBlock);\r\n                        createdElements.push($helpBlock[0]);\r\n                    }\r\n\r\n                    // =============================================================\r\n                    //                                     SNIFF HTML FOR VALIDATORS\r\n                    // =============================================================\r\n\r\n                    // *snort sniff snuffle*\r\n\r\n                    if (settings.options.sniffHtml) {\r\n                        var message = \"\";\r\n                        // ---------------------------------------------------------\r\n                        //                                                   PATTERN\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"pattern\") !== undefined) {\r\n                            message = \"Not in the expected format<!-- data-validation-pattern-message to override -->\";\r\n                            if ($this.data(\"validationPatternMessage\")) {\r\n                                message = $this.data(\"validationPatternMessage\");\r\n                            }\r\n                            $this.data(\"validationPatternMessage\", message);\r\n                            $this.data(\"validationPatternRegex\", $this.attr(\"pattern\"));\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                       MAX\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"max\") !== undefined || $this.attr(\"aria-valuemax\") !== undefined) {\r\n                            var max = ($this.attr(\"max\") !== undefined ? $this.attr(\"max\") : $this.attr(\"aria-valuemax\"));\r\n                            message = \"Too high: Maximum of '\" + max + \"'<!-- data-validation-max-message to override -->\";\r\n                            if ($this.data(\"validationMaxMessage\")) {\r\n                                message = $this.data(\"validationMaxMessage\");\r\n                            }\r\n                            $this.data(\"validationMaxMessage\", message);\r\n                            $this.data(\"validationMaxMax\", max);\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                       MIN\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"min\") !== undefined || $this.attr(\"aria-valuemin\") !== undefined) {\r\n                            var min = ($this.attr(\"min\") !== undefined ? $this.attr(\"min\") : $this.attr(\"aria-valuemin\"));\r\n                            message = \"Too low: Minimum of '\" + min + \"'<!-- data-validation-min-message to override -->\";\r\n                            if ($this.data(\"validationMinMessage\")) {\r\n                                message = $this.data(\"validationMinMessage\");\r\n                            }\r\n                            $this.data(\"validationMinMessage\", message);\r\n                            $this.data(\"validationMinMin\", min);\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                 MAXLENGTH\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"maxlength\") !== undefined) {\r\n                            message = \"Too long: Maximum of '\" + $this.attr(\"maxlength\") + \"' characters<!-- data-validation-maxlength-message to override -->\";\r\n                            if ($this.data(\"validationMaxlengthMessage\")) {\r\n                                message = $this.data(\"validationMaxlengthMessage\");\r\n                            }\r\n                            $this.data(\"validationMaxlengthMessage\", message);\r\n                            $this.data(\"validationMaxlengthMaxlength\", $this.attr(\"maxlength\"));\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                 MINLENGTH\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"minlength\") !== undefined) {\r\n                            message = \"Too short: Minimum of '\" + $this.attr(\"minlength\") + \"' characters<!-- data-validation-minlength-message to override -->\";\r\n                            if ($this.data(\"validationMinlengthMessage\")) {\r\n                                message = $this.data(\"validationMinlengthMessage\");\r\n                            }\r\n                            $this.data(\"validationMinlengthMessage\", message);\r\n                            $this.data(\"validationMinlengthMinlength\", $this.attr(\"minlength\"));\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                  REQUIRED\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"required\") !== undefined || $this.attr(\"aria-required\") !== undefined) {\r\n                            message = settings.builtInValidators.required.message;\r\n                            if ($this.data(\"validationRequiredMessage\")) {\r\n                                message = $this.data(\"validationRequiredMessage\");\r\n                            }\r\n                            $this.data(\"validationRequiredMessage\", message);\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                    NUMBER\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"number\") {\r\n                            message = settings.builtInValidators.number.message;\r\n                            if ($this.data(\"validationNumberMessage\")) {\r\n                                message = $this.data(\"validationNumberMessage\");\r\n                            }\r\n                            $this.data(\"validationNumberMessage\", message);\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                     EMAIL\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"email\") {\r\n                            message = \"Not a valid email address<!-- data-validator-validemail-message to override -->\";\r\n                            if ($this.data(\"validationValidemailMessage\")) {\r\n                                message = $this.data(\"validationValidemailMessage\");\r\n                            } else if ($this.data(\"validationEmailMessage\")) {\r\n                                message = $this.data(\"validationEmailMessage\");\r\n                            }\r\n                            $this.data(\"validationValidemailMessage\", message);\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                MINCHECKED\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"minchecked\") !== undefined) {\r\n                            message = \"Not enough options checked; Minimum of '\" + $this.attr(\"minchecked\") + \"' required<!-- data-validation-minchecked-message to override -->\";\r\n                            if ($this.data(\"validationMincheckedMessage\")) {\r\n                                message = $this.data(\"validationMincheckedMessage\");\r\n                            }\r\n                            $this.data(\"validationMincheckedMessage\", message);\r\n                            $this.data(\"validationMincheckedMinchecked\", $this.attr(\"minchecked\"));\r\n                        }\r\n                        // ---------------------------------------------------------\r\n                        //                                                MAXCHECKED\r\n                        // ---------------------------------------------------------\r\n                        if ($this.attr(\"maxchecked\") !== undefined) {\r\n                            message = \"Too many options checked; Maximum of '\" + $this.attr(\"maxchecked\") + \"' required<!-- data-validation-maxchecked-message to override -->\";\r\n                            if ($this.data(\"validationMaxcheckedMessage\")) {\r\n                                message = $this.data(\"validationMaxcheckedMessage\");\r\n                            }\r\n                            $this.data(\"validationMaxcheckedMessage\", message);\r\n                            $this.data(\"validationMaxcheckedMaxchecked\", $this.attr(\"maxchecked\"));\r\n                        }\r\n                    }\r\n\r\n                    // =============================================================\r\n                    //                                       COLLECT VALIDATOR NAMES\r\n                    // =============================================================\r\n\r\n                    // Get named validators\r\n                    if ($this.data(\"validation\") !== undefined) {\r\n                        validatorNames = $this.data(\"validation\").split(\",\");\r\n                    }\r\n\r\n                    // Get extra ones defined on the element's data attributes\r\n                    $.each($this.data(), function (i, el) {\r\n                        var parts = i.replace(/([A-Z])/g, \",$1\").split(\",\");\r\n                        if (parts[0] === \"validation\" && parts[1]) {\r\n                            validatorNames.push(parts[1]);\r\n                        }\r\n                    });\r\n\r\n                    // =============================================================\r\n                    //                                     NORMALISE VALIDATOR NAMES\r\n                    // =============================================================\r\n\r\n                    var validatorNamesToInspect = validatorNames;\r\n                    var newValidatorNamesToInspect = [];\r\n\r\n                    do // repeatedly expand 'shortcut' validators into their real validators\r\n                    {\r\n                        // Uppercase only the first letter of each name\r\n                        $.each(validatorNames, function (i, el) {\r\n                            validatorNames[i] = formatValidatorName(el);\r\n                        });\r\n\r\n                        // Remove duplicate validator names\r\n                        validatorNames = $.unique(validatorNames);\r\n\r\n                        // Pull out the new validator names from each shortcut\r\n                        newValidatorNamesToInspect = [];\r\n                        $.each(validatorNamesToInspect, function (i, el) {\r\n                            if ($this.data(\"validation\" + el + \"Shortcut\") !== undefined) {\r\n                                // Are these custom validators?\r\n                                // Pull them out!\r\n                                $.each($this.data(\"validation\" + el + \"Shortcut\").split(\",\"), function (i2, el2) {\r\n                                    newValidatorNamesToInspect.push(el2);\r\n                                });\r\n                            } else if (settings.builtInValidators[el.toLowerCase()]) {\r\n                                // Is this a recognised built-in?\r\n                                // Pull it out!\r\n                                var validator = settings.builtInValidators[el.toLowerCase()];\r\n                                if (validator.type.toLowerCase() === \"shortcut\") {\r\n                                    $.each(validator.shortcut.split(\",\"), function (i, el) {\r\n                                        el = formatValidatorName(el);\r\n                                        newValidatorNamesToInspect.push(el);\r\n                                        validatorNames.push(el);\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        validatorNamesToInspect = newValidatorNamesToInspect;\r\n\r\n                    } while (validatorNamesToInspect.length > 0);\r\n\r\n                    // =============================================================\r\n                    //                                       SET UP VALIDATOR ARRAYS\r\n                    // =============================================================\r\n\r\n                    var validators = {};\r\n\r\n                    $.each(validatorNames, function (i, el) {\r\n                        // Set up the 'override' message\r\n                        var message = $this.data(\"validation\" + el + \"Message\");\r\n                        var hasOverrideMessage = (message !== undefined);\r\n                        var foundValidator = false;\r\n                        message =\r\n                            (\r\n                                message ?\r\n                                    message :\r\n                                    \"'\" + el + \"' validation failed <!-- Add attribute 'data-validation-\" + el.toLowerCase() + \"-message' to input to change this message -->\"\r\n                            );\r\n\r\n                        $.each(\r\n                            settings.validatorTypes,\r\n                            function (validatorType, validatorTemplate) {\r\n                                if (validators[validatorType] === undefined) {\r\n                                    validators[validatorType] = [];\r\n                                }\r\n                                if (!foundValidator && $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name)) !== undefined) {\r\n                                    validators[validatorType].push(\r\n                                        $.extend(\r\n                                            true, {\r\n                                                name: formatValidatorName(validatorTemplate.name),\r\n                                                message: message\r\n                                            },\r\n                                            validatorTemplate.init($this, el)\r\n                                        )\r\n                                    );\r\n                                    foundValidator = true;\r\n                                }\r\n                            }\r\n                        );\r\n\r\n                        if (!foundValidator && settings.builtInValidators[el.toLowerCase()]) {\r\n\r\n                            var validator = $.extend(true, {}, settings.builtInValidators[el.toLowerCase()]);\r\n                            if (hasOverrideMessage) {\r\n                                validator.message = message;\r\n                            }\r\n                            var validatorType = validator.type.toLowerCase();\r\n\r\n                            if (validatorType === \"shortcut\") {\r\n                                foundValidator = true;\r\n                            } else {\r\n                                $.each(\r\n                                    settings.validatorTypes,\r\n                                    function (validatorTemplateType, validatorTemplate) {\r\n                                        if (validators[validatorTemplateType] === undefined) {\r\n                                            validators[validatorTemplateType] = [];\r\n                                        }\r\n                                        if (!foundValidator && validatorType === validatorTemplateType.toLowerCase()) {\r\n                                            $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name), validator[validatorTemplate.name.toLowerCase()]);\r\n                                            validators[validatorType].push(\r\n                                                $.extend(\r\n                                                    validator,\r\n                                                    validatorTemplate.init($this, el)\r\n                                                )\r\n                                            );\r\n                                            foundValidator = true;\r\n                                        }\r\n                                    }\r\n                                );\r\n                            }\r\n                        }\r\n\r\n                        if (!foundValidator) {\r\n                            $.error(\"Cannot find validation info for '\" + el + \"'\");\r\n                        }\r\n                    });\r\n\r\n                    // =============================================================\r\n                    //                                         STORE FALLBACK VALUES\r\n                    // =============================================================\r\n\r\n                    $helpBlock.data(\r\n                        \"original-contents\",\r\n                        (\r\n                            $helpBlock.data(\"original-contents\") ?\r\n                                $helpBlock.data(\"original-contents\") :\r\n                                $helpBlock.html()\r\n                        )\r\n                    );\r\n\r\n                    $helpBlock.data(\r\n                        \"original-role\",\r\n                        (\r\n                            $helpBlock.data(\"original-role\") ?\r\n                                $helpBlock.data(\"original-role\") :\r\n                                $helpBlock.attr(\"role\")\r\n                        )\r\n                    );\r\n\r\n                    $controlGroup.data(\r\n                        \"original-classes\",\r\n                        (\r\n                            $controlGroup.data(\"original-clases\") ?\r\n                                $controlGroup.data(\"original-classes\") :\r\n                                $controlGroup.attr(\"class\")\r\n                        )\r\n                    );\r\n\r\n                    $this.data(\r\n                        \"original-aria-invalid\",\r\n                        (\r\n                            $this.data(\"original-aria-invalid\") ?\r\n                                $this.data(\"original-aria-invalid\") :\r\n                                $this.attr(\"aria-invalid\")\r\n                        )\r\n                    );\r\n\r\n                    // =============================================================\r\n                    //                                                    VALIDATION\r\n                    // =============================================================\r\n\r\n                    $this.bind(\r\n                        \"validation.validation\",\r\n                        function (event, params) {\r\n\r\n                            var value = getValue($this);\r\n\r\n                            // Get a list of the errors to apply\r\n                            var errorsFound = [];\r\n\r\n                            $.each(validators, function (validatorType, validatorTypeArray) {\r\n                                if (value || value.length || (params && params.includeEmpty) || (!!settings.validatorTypes[validatorType].blockSubmit && params && !!params.submitting)) {\r\n                                    $.each(validatorTypeArray, function (i, validator) {\r\n                                        if (settings.validatorTypes[validatorType].validate($this, value, validator)) {\r\n                                            errorsFound.push(validator.message);\r\n                                        }\r\n                                    });\r\n                                }\r\n                            });\r\n\r\n                            return errorsFound;\r\n                        }\r\n                    );\r\n\r\n                    $this.bind(\r\n                        \"getValidators.validation\",\r\n                        function () {\r\n                            return validators;\r\n                        }\r\n                    );\r\n\r\n                    // =============================================================\r\n                    //                                             WATCH FOR CHANGES\r\n                    // =============================================================\r\n                    $this.bind(\r\n                        \"submit.validation\",\r\n                        function () {\r\n                            return $this.triggerHandler(\"change.validation\", {\r\n                                submitting: true\r\n                            });\r\n                        }\r\n                    );\r\n                    $this.bind(\r\n                        [\r\n                            \"keyup\",\r\n                            \"focus\",\r\n                            \"blur\",\r\n                            \"click\",\r\n                            \"keydown\",\r\n                            \"keypress\",\r\n                            \"change\"\r\n                        ].join(\".validation \") + \".validation\",\r\n                        function (e, params) {\r\n\r\n                            var value = getValue($this);\r\n\r\n                            var errorsFound = [];\r\n\r\n                            $controlGroup.find(\"input,textarea,select\").each(function (i, el) {\r\n                                var oldCount = errorsFound.length;\r\n                                $.each($(el).triggerHandler(\"validation.validation\", params), function (j, message) {\r\n                                    errorsFound.push(message);\r\n                                });\r\n                                if (errorsFound.length > oldCount) {\r\n                                    $(el).attr(\"aria-invalid\", \"true\");\r\n                                } else {\r\n                                    var original = $this.data(\"original-aria-invalid\");\r\n                                    $(el).attr(\"aria-invalid\", (original !== undefined ? original : false));\r\n                                }\r\n                            });\r\n\r\n                            $form.find(\"input,select,textarea\").not($this).not(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\").trigger(\"validationLostFocus.validation\");\r\n\r\n                            errorsFound = $.unique(errorsFound.sort());\r\n\r\n                            // Were there any errors?\r\n                            if (errorsFound.length) {\r\n                                // Better flag it up as a warning.\r\n                                $controlGroup.removeClass(\"success error\").addClass(\"warning\");\r\n\r\n                                // How many errors did we find?\r\n                                if (settings.options.semanticallyStrict && errorsFound.length === 1) {\r\n                                    // Only one? Being strict? Just output it.\r\n                                    $helpBlock.html(errorsFound[0] +\r\n                                        (settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\"));\r\n                                } else {\r\n                                    // Multiple? Being sloppy? Glue them together into an UL.\r\n                                    $helpBlock.html(\"<ul role=\\\"alert\\\"><li>\" + errorsFound.join(\"</li><li>\") + \"</li></ul>\" +\r\n                                        (settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\"));\r\n                                }\r\n                            } else {\r\n                                $controlGroup.removeClass(\"warning error success\");\r\n                                if (value.length > 0) {\r\n                                    $controlGroup.addClass(\"success\");\r\n                                }\r\n                                $helpBlock.html($helpBlock.data(\"original-contents\"));\r\n                            }\r\n\r\n                            if (e.type === \"blur\") {\r\n                                $controlGroup.removeClass(\"success\");\r\n                            }\r\n                        }\r\n                    );\r\n                    $this.bind(\"validationLostFocus.validation\", function () {\r\n                        $controlGroup.removeClass(\"success\");\r\n                    });\r\n                });\r\n            },\r\n            destroy: function () {\r\n\r\n                return this.each(\r\n                    function () {\r\n\r\n                        var\r\n                            $this = $(this),\r\n                            $controlGroup = $this.parents(\".form-group\").first(),\r\n                            $helpBlock = $controlGroup.find(\".help-block\").first();\r\n\r\n                        // remove our events\r\n                        $this.unbind('.validation'); // events are namespaced.\r\n                        // reset help text\r\n                        $helpBlock.html($helpBlock.data(\"original-contents\"));\r\n                        // reset classes\r\n                        $controlGroup.attr(\"class\", $controlGroup.data(\"original-classes\"));\r\n                        // reset aria\r\n                        $this.attr(\"aria-invalid\", $this.data(\"original-aria-invalid\"));\r\n                        // reset role\r\n                        $helpBlock.attr(\"role\", $this.data(\"original-role\"));\r\n                        // remove all elements we created\r\n                        if (createdElements.indexOf($helpBlock[0]) > -1) {\r\n                            $helpBlock.remove();\r\n                        }\r\n\r\n                    }\r\n                );\r\n\r\n            },\r\n            collectErrors: function (includeEmpty) {\r\n\r\n                var errorMessages = {};\r\n                this.each(function (i, el) {\r\n                    var $el = $(el);\r\n                    var name = $el.attr(\"name\");\r\n                    var errors = $el.triggerHandler(\"validation.validation\", {\r\n                        includeEmpty: true\r\n                    });\r\n                    errorMessages[name] = $.extend(true, errors, errorMessages[name]);\r\n                });\r\n\r\n                $.each(errorMessages, function (i, el) {\r\n                    if (el.length === 0) {\r\n                        delete errorMessages[i];\r\n                    }\r\n                });\r\n\r\n                return errorMessages;\r\n\r\n            },\r\n            hasErrors: function () {\r\n\r\n                var errorMessages = [];\r\n\r\n                this.each(function (i, el) {\r\n                    errorMessages = errorMessages.concat(\r\n                        $(el).triggerHandler(\"getValidators.validation\") ? $(el).triggerHandler(\"validation.validation\", {\r\n                            submitting: true\r\n                        }) : []\r\n                    );\r\n                });\r\n\r\n                return (errorMessages.length > 0);\r\n            },\r\n            override: function (newDefaults) {\r\n                defaults = $.extend(true, defaults, newDefaults);\r\n            }\r\n        },\r\n        validatorTypes: {\r\n            callback: {\r\n                name: \"callback\",\r\n                init: function ($this, name) {\r\n                    return {\r\n                        validatorName: name,\r\n                        callback: $this.data(\"validation\" + name + \"Callback\"),\r\n                        lastValue: $this.val(),\r\n                        lastValid: true,\r\n                        lastFinished: true\r\n                    };\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    if (validator.lastValue === value && validator.lastFinished) {\r\n                        return !validator.lastValid;\r\n                    }\r\n\r\n                    if (validator.lastFinished === true) {\r\n                        validator.lastValue = value;\r\n                        validator.lastValid = true;\r\n                        validator.lastFinished = false;\r\n\r\n                        var rrjqbvValidator = validator;\r\n                        var rrjqbvThis = $this;\r\n                        executeFunctionByName(\r\n                            validator.callback,\r\n                            window,\r\n                            $this,\r\n                            value,\r\n                            function (data) {\r\n                                if (rrjqbvValidator.lastValue === data.value) {\r\n                                    rrjqbvValidator.lastValid = data.valid;\r\n                                    if (data.message) {\r\n                                        rrjqbvValidator.message = data.message;\r\n                                    }\r\n                                    rrjqbvValidator.lastFinished = true;\r\n                                    rrjqbvThis.data(\"validation\" + rrjqbvValidator.validatorName + \"Message\", rrjqbvValidator.message);\r\n                                    // Timeout is set to avoid problems with the events being considered 'already fired'\r\n                                    setTimeout(function () {\r\n                                        rrjqbvThis.trigger(\"change.validation\");\r\n                                    }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\r\n                                }\r\n                            }\r\n                        );\r\n                    }\r\n\r\n                    return false;\r\n\r\n                }\r\n            },\r\n            ajax: {\r\n                name: \"ajax\",\r\n                init: function ($this, name) {\r\n                    return {\r\n                        validatorName: name,\r\n                        url: $this.data(\"validation\" + name + \"Ajax\"),\r\n                        lastValue: $this.val(),\r\n                        lastValid: true,\r\n                        lastFinished: true\r\n                    };\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    if (\"\" + validator.lastValue === \"\" + value && validator.lastFinished === true) {\r\n                        return validator.lastValid === false;\r\n                    }\r\n\r\n                    if (validator.lastFinished === true) {\r\n                        validator.lastValue = value;\r\n                        validator.lastValid = true;\r\n                        validator.lastFinished = false;\r\n                        $.ajax({\r\n                            url: validator.url,\r\n                            data: \"value=\" + value + \"&field=\" + $this.attr(\"name\"),\r\n                            dataType: \"json\",\r\n                            success: function (data) {\r\n                                if (\"\" + validator.lastValue === \"\" + data.value) {\r\n                                    validator.lastValid = !!(data.valid);\r\n                                    if (data.message) {\r\n                                        validator.message = data.message;\r\n                                    }\r\n                                    validator.lastFinished = true;\r\n                                    $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\r\n                                    // Timeout is set to avoid problems with the events being considered 'already fired'\r\n                                    setTimeout(function () {\r\n                                        $this.trigger(\"change.validation\");\r\n                                    }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\r\n                                }\r\n                            },\r\n                            failure: function () {\r\n                                validator.lastValid = true;\r\n                                validator.message = \"ajax call failed\";\r\n                                validator.lastFinished = true;\r\n                                $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\r\n                                // Timeout is set to avoid problems with the events being considered 'already fired'\r\n                                setTimeout(function () {\r\n                                    $this.trigger(\"change.validation\");\r\n                                }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    return false;\r\n\r\n                }\r\n            },\r\n            regex: {\r\n                name: \"regex\",\r\n                init: function ($this, name) {\r\n                    return {\r\n                        regex: regexFromString($this.data(\"validation\" + name + \"Regex\"))\r\n                    };\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return (!validator.regex.test(value) && !validator.negative) ||\r\n                        (validator.regex.test(value) && validator.negative);\r\n                }\r\n            },\r\n            required: {\r\n                name: \"required\",\r\n                init: function ($this, name) {\r\n                    return {};\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return !!(value.length === 0 && !validator.negative) ||\r\n                        !!(value.length > 0 && validator.negative);\r\n                },\r\n                blockSubmit: true\r\n            },\r\n            match: {\r\n                name: \"match\",\r\n                init: function ($this, name) {\r\n                    var element = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.data(\"validation\" + name + \"Match\") + \"\\\"]\").first();\r\n                    element.bind(\"validation.validation\", function () {\r\n                        $this.trigger(\"change.validation\", {\r\n                            submitting: true\r\n                        });\r\n                    });\r\n                    return {\r\n                        \"element\": element\r\n                    };\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return (value !== validator.element.val() && !validator.negative) ||\r\n                        (value === validator.element.val() && validator.negative);\r\n                },\r\n                blockSubmit: true\r\n            },\r\n            max: {\r\n                name: \"max\",\r\n                init: function ($this, name) {\r\n                    return {\r\n                        max: $this.data(\"validation\" + name + \"Max\")\r\n                    };\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return (parseFloat(value, 10) > parseFloat(validator.max, 10) && !validator.negative) ||\r\n                        (parseFloat(value, 10) <= parseFloat(validator.max, 10) && validator.negative);\r\n                }\r\n            },\r\n            min: {\r\n                name: \"min\",\r\n                init: function ($this, name) {\r\n                    return {\r\n                        min: $this.data(\"validation\" + name + \"Min\")\r\n                    };\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return (parseFloat(value) < parseFloat(validator.min) && !validator.negative) ||\r\n                        (parseFloat(value) >= parseFloat(validator.min) && validator.negative);\r\n                }\r\n            },\r\n            maxlength: {\r\n                name: \"maxlength\",\r\n                init: function ($this, name) {\r\n                    return {\r\n                        maxlength: $this.data(\"validation\" + name + \"Maxlength\")\r\n                    };\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return ((value.length > validator.maxlength) && !validator.negative) ||\r\n                        ((value.length <= validator.maxlength) && validator.negative);\r\n                }\r\n            },\r\n            minlength: {\r\n                name: \"minlength\",\r\n                init: function ($this, name) {\r\n                    return {\r\n                        minlength: $this.data(\"validation\" + name + \"Minlength\")\r\n                    };\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return ((value.length < validator.minlength) && !validator.negative) ||\r\n                        ((value.length >= validator.minlength) && validator.negative);\r\n                }\r\n            },\r\n            maxchecked: {\r\n                name: \"maxchecked\",\r\n                init: function ($this, name) {\r\n                    var elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\r\n                    elements.bind(\"click.validation\", function () {\r\n                        $this.trigger(\"change.validation\", {\r\n                            includeEmpty: true\r\n                        });\r\n                    });\r\n                    return {\r\n                        maxchecked: $this.data(\"validation\" + name + \"Maxchecked\"),\r\n                        elements: elements\r\n                    };\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return (validator.elements.filter(\":checked\").length > validator.maxchecked && !validator.negative) ||\r\n                        (validator.elements.filter(\":checked\").length <= validator.maxchecked && validator.negative);\r\n                },\r\n                blockSubmit: true\r\n            },\r\n            minchecked: {\r\n                name: \"minchecked\",\r\n                init: function ($this, name) {\r\n                    var elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\r\n                    elements.bind(\"click.validation\", function () {\r\n                        $this.trigger(\"change.validation\", {\r\n                            includeEmpty: true\r\n                        });\r\n                    });\r\n                    return {\r\n                        minchecked: $this.data(\"validation\" + name + \"Minchecked\"),\r\n                        elements: elements\r\n                    };\r\n                },\r\n                validate: function ($this, value, validator) {\r\n                    return (validator.elements.filter(\":checked\").length < validator.minchecked && !validator.negative) ||\r\n                        (validator.elements.filter(\":checked\").length >= validator.minchecked && validator.negative);\r\n                },\r\n                blockSubmit: true\r\n            }\r\n        },\r\n        builtInValidators: {\r\n            email: {\r\n                name: \"Email\",\r\n                type: \"shortcut\",\r\n                shortcut: \"validemail\"\r\n            },\r\n            validemail: {\r\n                name: \"Validemail\",\r\n                type: \"regex\",\r\n                regex: \"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\\\.[A-Za-z]{2,4}\",\r\n                message: \"Not a valid email address<!-- data-validator-validemail-message to override -->\"\r\n            },\r\n            passwordagain: {\r\n                name: \"Passwordagain\",\r\n                type: \"match\",\r\n                match: \"password\",\r\n                message: \"Does not match the given password<!-- data-validator-paswordagain-message to override -->\"\r\n            },\r\n            positive: {\r\n                name: \"Positive\",\r\n                type: \"shortcut\",\r\n                shortcut: \"number,positivenumber\"\r\n            },\r\n            negative: {\r\n                name: \"Negative\",\r\n                type: \"shortcut\",\r\n                shortcut: \"number,negativenumber\"\r\n            },\r\n            number: {\r\n                name: \"Number\",\r\n                type: \"regex\",\r\n                regex: \"([+-]?\\\\\\d+(\\\\\\.\\\\\\d*)?([eE][+-]?[0-9]+)?)?\",\r\n                message: \"Must be a number<!-- data-validator-number-message to override -->\"\r\n            },\r\n            integer: {\r\n                name: \"Integer\",\r\n                type: \"regex\",\r\n                regex: \"[+-]?\\\\\\d+\",\r\n                message: \"No decimal places allowed<!-- data-validator-integer-message to override -->\"\r\n            },\r\n            positivenumber: {\r\n                name: \"Positivenumber\",\r\n                type: \"min\",\r\n                min: 0,\r\n                message: \"Must be a positive number<!-- data-validator-positivenumber-message to override -->\"\r\n            },\r\n            negativenumber: {\r\n                name: \"Negativenumber\",\r\n                type: \"max\",\r\n                max: 0,\r\n                message: \"Must be a negative number<!-- data-validator-negativenumber-message to override -->\"\r\n            },\r\n            required: {\r\n                name: \"Required\",\r\n                type: \"required\",\r\n                message: \"This is required<!-- data-validator-required-message to override -->\"\r\n            },\r\n            checkone: {\r\n                name: \"Checkone\",\r\n                type: \"minchecked\",\r\n                minchecked: 1,\r\n                message: \"Check at least one option<!-- data-validation-checkone-message to override -->\"\r\n            }\r\n        }\r\n    };\r\n\r\n    var formatValidatorName = function (name) {\r\n        return name\r\n            .toLowerCase()\r\n            .replace(\r\n                /(^|\\s)([a-z])/g,\r\n                function (m, p1, p2) {\r\n                    return p1 + p2.toUpperCase();\r\n                }\r\n            );\r\n    };\r\n\r\n    var getValue = function ($this) {\r\n        // Extract the value we're talking how\r\n        var value = $this.val();\r\n        var type = $this.attr(\"type\");\r\n        if (type === \"checkbox\") {\r\n            value = ($this.is(\":checked\") ? value : \"\");\r\n        }\r\n        if (type === \"radio\") {\r\n            value = ($('input[name=\"' + $this.attr(\"name\") + '\"]:checked').length > 0 ? value : \"\");\r\n        }\r\n        return value;\r\n    };\r\n\r\n    function regexFromString(inputstring) {\r\n        return new RegExp(\"^\" + inputstring + \"$\");\r\n    }\r\n\r\n    /**\r\n     * Thanks to Jason Bunting via StackOverflow.com\r\n     *\r\n     * http://stackoverflow.com/questions/359788/how-to-execute-a-javascript-function-when-i-have-its-name-as-a-string#answer-359910\r\n     * Short link: http://tinyurl.com/executeFunctionByName\r\n     **/\r\n    function executeFunctionByName(functionName, context /*, args*/) {\r\n        var args = Array.prototype.slice.call(arguments).splice(2);\r\n        var namespaces = functionName.split(\".\");\r\n        var func = namespaces.pop();\r\n        for (var i = 0; i < namespaces.length; i++) {\r\n            context = context[namespaces[i]];\r\n        }\r\n        return context[func].apply(this, args);\r\n    }\r\n\r\n    $.fn.jqBootstrapValidation = function (method) {\r\n\r\n        if (defaults.methods[method]) {\r\n            return defaults.methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof method === 'object' || !method) {\r\n            return defaults.methods.init.apply(this, arguments);\r\n        } else {\r\n            $.error('Method ' + method + ' does not exist on jQuery.jqBootstrapValidation');\r\n            return null;\r\n        }\r\n\r\n    };\r\n\r\n    $.jqBootstrapValidation = function (options) {\r\n        $(\":input\").not(\"[type=image],[type=submit]\").jqBootstrapValidation.apply(this, arguments);\r\n    };\r\n\r\n})(jQuery);\r\n"]}